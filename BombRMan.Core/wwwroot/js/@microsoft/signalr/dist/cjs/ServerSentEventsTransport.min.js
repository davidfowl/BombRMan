/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/@microsoft/signalr@6.0.4/dist/cjs/ServerSentEventsTransport.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ServerSentEventsTransport=void 0;const ILogger_1=require("./ILogger"),ITransport_1=require("./ITransport"),Utils_1=require("./Utils");class ServerSentEventsTransport{constructor(e,t,r,s){this._httpClient=e,this._accessTokenFactory=t,this._logger=r,this._options=s,this.onreceive=null,this.onclose=null}async connect(e,t){if(Utils_1.Arg.isRequired(e,"url"),Utils_1.Arg.isRequired(t,"transferFormat"),Utils_1.Arg.isIn(t,ITransport_1.TransferFormat,"transferFormat"),this._logger.log(ILogger_1.LogLevel.Trace,"(SSE transport) Connecting."),this._url=e,this._accessTokenFactory){const t=await this._accessTokenFactory();t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`)}return new Promise(((r,s)=>{let o,n=!1;if(t===ITransport_1.TransferFormat.Text){if(Utils_1.Platform.isBrowser||Utils_1.Platform.isWebWorker)o=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const t=this._httpClient.getCookieString(e),r={};r.Cookie=t;const[s,n]=Utils_1.getUserAgentHeader();r[s]=n,o=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...r,...this._options.headers}})}try{o.onmessage=e=>{if(this.onreceive)try{this._logger.log(ILogger_1.LogLevel.Trace,`(SSE transport) data received. ${Utils_1.getDataDetail(e.data,this._options.logMessageContent)}.`),this.onreceive(e.data)}catch(e){return void this._close(e)}},o.onerror=e=>{n?this._close():s(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},o.onopen=()=>{this._logger.log(ILogger_1.LogLevel.Information,`SSE connected to ${this._url}`),this._eventSource=o,n=!0,r()}}catch(e){return void s(e)}}else s(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))}async send(e){return this._eventSource?Utils_1.sendMessage(this._logger,"SSE",this._httpClient,this._url,this._accessTokenFactory,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}exports.ServerSentEventsTransport=ServerSentEventsTransport;
//# sourceMappingURL=/sm/5eb976c595bb51a401bb489adec0c66a3a1b1cc01b06ee462bfaa0a5d43475ec.map