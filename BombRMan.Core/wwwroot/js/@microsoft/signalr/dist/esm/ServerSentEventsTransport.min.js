/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/@microsoft/signalr@6.0.4/dist/esm/ServerSentEventsTransport.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{LogLevel}from"./ILogger";import{TransferFormat}from"./ITransport";import{Arg,getDataDetail,getUserAgentHeader,Platform,sendMessage}from"./Utils";export class ServerSentEventsTransport{constructor(e,t,o,r){this._httpClient=e,this._accessTokenFactory=t,this._logger=o,this._options=r,this.onreceive=null,this.onclose=null}async connect(e,t){if(Arg.isRequired(e,"url"),Arg.isRequired(t,"transferFormat"),Arg.isIn(t,TransferFormat,"transferFormat"),this._logger.log(LogLevel.Trace,"(SSE transport) Connecting."),this._url=e,this._accessTokenFactory){const t=await this._accessTokenFactory();t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`)}return new Promise(((o,r)=>{let s,n=!1;if(t===TransferFormat.Text){if(Platform.isBrowser||Platform.isWebWorker)s=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const t=this._httpClient.getCookieString(e),o={};o.Cookie=t;const[r,n]=getUserAgentHeader();o[r]=n,s=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...o,...this._options.headers}})}try{s.onmessage=e=>{if(this.onreceive)try{this._logger.log(LogLevel.Trace,`(SSE transport) data received. ${getDataDetail(e.data,this._options.logMessageContent)}.`),this.onreceive(e.data)}catch(e){return void this._close(e)}},s.onerror=e=>{n?this._close():r(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},s.onopen=()=>{this._logger.log(LogLevel.Information,`SSE connected to ${this._url}`),this._eventSource=s,n=!0,o()}}catch(e){return void r(e)}}else r(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))}async send(e){return this._eventSource?sendMessage(this._logger,"SSE",this._httpClient,this._url,this._accessTokenFactory,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}
//# sourceMappingURL=/sm/e0d0c1c2ba2eef14c3a18a8dc4283fa70693a20224c0bdfca1c4ac5ebcbd640b.map