/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/@microsoft/signalr@6.0.4/dist/esm/HandshakeProtocol.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{TextMessageFormat}from"./TextMessageFormat";import{isArrayBuffer}from"./Utils";export class HandshakeProtocol{writeHandshakeRequest(e){return TextMessageFormat.write(JSON.stringify(e))}parseHandshakeResponse(e){let r,s;if(isArrayBuffer(e)){const t=new Uint8Array(e),o=t.indexOf(TextMessageFormat.RecordSeparatorCode);if(-1===o)throw new Error("Message is incomplete.");const a=o+1;r=String.fromCharCode.apply(null,Array.prototype.slice.call(t.slice(0,a))),s=t.byteLength>a?t.slice(a).buffer:null}else{const t=e,o=t.indexOf(TextMessageFormat.RecordSeparator);if(-1===o)throw new Error("Message is incomplete.");const a=o+1;r=t.substring(0,a),s=t.length>a?t.substring(a):null}const t=TextMessageFormat.parse(r),o=JSON.parse(t[0]);if(o.type)throw new Error("Expected a handshake response from the server.");return[s,o]}}
//# sourceMappingURL=/sm/b78c094b77761d8ac94fb98e8104a911fa9f2067d3d5db21c6d5a01f73268486.map